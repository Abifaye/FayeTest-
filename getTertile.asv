function [firstTertile,secondTertile,thirdTertile] = getTertile
%Splits RTs into tertile and takes the corresponding
%hit profiles
%% Initialize variables
cd 'C:\GitHub\FayeTest-'
%load master table with hit profiles file 
load('TablewithHitProfiles.mat');
%getmasterRTs
%init locations for top + btm profiles
firstTertile= [];
secondTertile = [];
thirdTertile = [];
%% Create loop for getting hit profiles and putting them in topPros/btmPros matrix
%loop through all sessions
for nSession = 1:height(TablewithHitProfiles)
    %create variables for hit profiles and reaction times from the master
    %table
    RTs = cell2mat(TablewithHitProfiles.stimCorrectRTs(nSession));
    hitPros = cell2mat(struct2cell(TablewithHitProfiles.HitProfiles(nSession)));
    %Create logical index for the top + btm percentile of RTs. prctile function
    %creates range for top and bottom percentile
    firstIdx = (RTs >= min(prctile(RTs,[0 33.33])) & RTs <= max(prctile(RTs,[0 33.33])));
    secondIdx = (RTs > min(prctile(RTs,[33.33 66.67])) & RTs <= max(prctile(RTs,[33.33 66.67])));
    thirdIdx = (RTs > min(prctile(RTs,[66.67 100])) & RTs <= max(prctile(RTs,[66.67 100])));
    %Grabs all trials in current session and appends them to the matrix
    firstTertile = [firstTertile; hitPros(firstIdx,:)];
    secondTertile = [secondTertile; hitPros(secondIdx,:)];
    thirdTertile = [thirdTertile; hitPros(thirdIdx,:)];
end
%% Graphs
clf;
hold on
plot(mean(firstTertile/2 + 0.5,1),color='b')
plot(mean(secondTertile/2 + 0.5,1),Color='r')
plot(mean(thirdTertile/2 + 0.5,1),Color='g')
hold off
title('Tertile of Mean Hit Profiles')
legend('First Tertile','Second Tertile',['Third ' ...
    'Tertile'],'Location','southwest')

%% Bootstrapping

%First Tertile
%for reps = 1:1000
    %bootfirstTertile(reps,1:800) = mean(datasample(firstTertile,size(firstTertile,1),"Replace",true));
%end

%2nd Tertile
%for reps = 1:1000
   % bootsecondTertile(reps,1:800) = mean(datasample(secondTertile,size(firstTertile,1),"Replace",true));
%end

%3rd Tertile
%for reps = 1:1000
   % bootthirdTertile(reps,1:800) = mean(datasample(thirdTertile,size(firstTertile,1),"Replace",true));
%end
%firstSEM = std(bootfirstTertile,1)./sqrt(size(bootfirstTertile,1));
%secondSEM = std(bootsecondTertile,1)./sqrt(size(bootsecondTertile,1));
%thirdSEM = std(bootthirdTertile,1)./sqrt(size(bootthirdTertile,1));

%First Tertile
sampleFreqHz = 1000;
filterLP = designfilt('lowpassfir', 'PassbandFrequency', 90 / sampleFreqHz, ...
    'StopbandFrequency', 2 * 90 / sampleFreqHz, 'PassbandRipple', 1, 'StopbandAttenuation', 60, ...
    'DesignMethod','equiripple');

bootKernel = bootstrp(1000, @mean,firstTertile);
PCs = prctile(bootKernel, [15.9, 50, 84.1]);              % +/- 1 SEM
PCMeans = mean(PCs, 2);
CIs = zeros(3, size(firstTertile, 2));
for c = 1:3
    CIs(c,:) = filtfilt(filterLP, PCs(c,:) - PCMeans(c)) + PCMeans(c);
end

cla reset;
bins = size(bootstraps, 2);
if bins < 25
    return;
end

x = 1:size(CIs, 2);
plot(x, CIs(2, :), 'b'); % This plots the mean of the bootstrap
hold on;
x2 = [x, fliplr(x)];
fillCI = [CIs(1, :), fliplr(CIs(3, :))]; % This sets up the fill for the errors
fill(x2, fillCI, 'b', 'lineStyle', '-', 'edgeColor', 'b', 'edgeAlpha', 0.5, 'faceAlpha', 0.10); % adds the fill
ax = gca;
xlim(ax, [0, bins]);
ax.XGrid = 'on';

%Second Tertile
sampleFreqHz = 1000;
filterLP = designfilt('lowpassfir', 'PassbandFrequency', 90 / sampleFreqHz, ...
    'StopbandFrequency', 2 * 90 / sampleFreqHz, 'PassbandRipple', 1, 'StopbandAttenuation', 60, ...
    'DesignMethod','equiripple');

bootKernel = bootstrp(1000, @mean,secondTertile(1:size(firstTertile,2),1:size(secondTertile,2)));
PCs = prctile(bootKernel, [15.9, 50, 84.1]);              % +/- 1 SEM
PCMeans = mean(PCs, 2);
CIs = zeros(3, size(firstTertile, 2));
for c = 1:3
    CIs(c,:) = filtfilt(filterLP, PCs(c,:) - PCMeans(c)) + PCMeans(c);
end

cla reset;
bins = size(bootstraps, 2);
if bins < 25
    return;
end

x = 1:size(CIs, 2);
plot(x, CIs(2, :), 'b'); % This plots the mean of the bootstrap
hold on;
x2 = [x, fliplr(x)];
fillCI = [CIs(1, :), fliplr(CIs(3, :))]; % This sets up the fill for the errors
fill(x2, fillCI, 'b', 'lineStyle', '-', 'edgeColor', 'b', 'edgeAlpha', 0.5, 'faceAlpha', 0.10); % adds the fill
ax = gca;
xlim(ax, [0, bins]);
ax.XGrid = 'on';

%[bootstat,bootsam] = bootstrp(10,@mean,firstTertile);
%PCs = prctile(bootstat, [1, 1, 1]); %-1 SEM, Mean, +1 SEM
%PCMeans = mean(PCs, 2);
 
end